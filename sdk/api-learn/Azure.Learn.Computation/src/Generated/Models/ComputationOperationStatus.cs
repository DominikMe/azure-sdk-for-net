// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Learn.Computation.Models
{
    /// <summary> The current status of the operation. </summary>
    internal readonly partial struct ComputationOperationStatus : IEquatable<ComputationOperationStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ComputationOperationStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputationOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotstartedValue = "notstarted";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";
        private const string CancelledValue = "cancelled";

        /// <summary> notstarted. </summary>
        public static ComputationOperationStatus Notstarted { get; } = new ComputationOperationStatus(NotstartedValue);
        /// <summary> running. </summary>
        public static ComputationOperationStatus Running { get; } = new ComputationOperationStatus(RunningValue);
        /// <summary> succeeded. </summary>
        public static ComputationOperationStatus Succeeded { get; } = new ComputationOperationStatus(SucceededValue);
        /// <summary> failed. </summary>
        public static ComputationOperationStatus Failed { get; } = new ComputationOperationStatus(FailedValue);
        /// <summary> cancelled. </summary>
        public static ComputationOperationStatus Cancelled { get; } = new ComputationOperationStatus(CancelledValue);
        /// <summary> Determines if two <see cref="ComputationOperationStatus"/> values are the same. </summary>
        public static bool operator ==(ComputationOperationStatus left, ComputationOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputationOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(ComputationOperationStatus left, ComputationOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputationOperationStatus"/>. </summary>
        public static implicit operator ComputationOperationStatus(string value) => new ComputationOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputationOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputationOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
